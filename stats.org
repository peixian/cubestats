#+BEGIN_SRC ipython :session :exports both
  import pandas as pd
  import numpy as np
  import json
#+END_SRC

#+RESULTS:

Load mtgjson into the `cards` variable

#+BEGIN_SRC ipython :session :results output :exports both
  with open('./allcards.json') as infile:
      cards = json.load(infile)

  print(cards['Air Elemental'])
  print(cards['Ætherling'])
  print(cards['Far'])
#+END_SRC

#+RESULTS:
: {'cmc': 5, 'type': 'Creature — Elemental', 'types': ['Creature'], 'manaCost': '{3}{U}{U}', 'imageName': 'air elemental', 'subtypes': ['Elemental'], 'text': 'Flying', 'colorIdentity': ['U'], 'colors': ['Blue'], 'power': '4', 'toughness': '4', 'layout': 'normal', 'name': 'Air Elemental'}
: {'cmc': 6, 'type': 'Creature — Shapeshifter', 'types': ['Creature'], 'manaCost': '{4}{U}{U}', 'imageName': 'ætherling', 'subtypes': ['Shapeshifter'], 'text': "{U}: Exile Ætherling. Return it to the battlefield under its owner's control at the beginning of the next end step.\n{U}: Ætherling can't be blocked this turn.\n{1}: Ætherling gets +1/-1 until end of turn.\n{1}: Ætherling gets -1/+1 until end of turn.", 'colorIdentity': ['U'], 'colors': ['Blue'], 'power': '4', 'toughness': '5', 'layout': 'normal', 'name': 'Ætherling'}
: {'cmc': 2, 'names': ['Far', 'Away'], 'type': 'Instant', 'types': ['Instant'], 'colors': ['Blue'], 'manaCost': '{1}{U}', 'imageName': 'far', 'layout': 'split', 'name': 'Far', 'text': "Return target creature to its owner's hand.\nFuse (You may cast one or both halves of this card from your hand.)", 'colorIdentity': ['B', 'U']}

Google sheets api:

#+BEGIN_SRC ipython :session :results output :exports both
  file_id = '1YHYoEoFFiPwH4LG4_34-EIghaphHR1OAT02pgcj595Q'
  sheet_id = '678309503' #individual sheets have ids too
  range_name = 'B8:I540'
  with open('secrets.txt', 'r') as infile:
      API_KEY = infile.read()

  SCOPES = 'https://www.googleapis.com/auth/spreadsheets.readonly'
  API_URL = 'https://sheets.googleapis.com/v4/spreadsheets/{}'
  import requests
  params = {'key': API_KEY, 'ranges': range_name, 'fields': 'properties.title,sheets(data.rowData.values(effectiveValue))'}
  req = requests.get(API_URL.format(file_id), params=params)
  print(req.status_code)
  data = req.json()
  
#+END_SRC

#+RESULTS:
: 200

#+BEGIN_SRC ipython :session :results output
  #print(data['sheets'][0]['data'][0]['rowData'][0])
  row_data = data['sheets'][0]['data'][0]['rowData']
  row_data = list(map(lambda x: x['values'], row_data))

  card_list = list(filter(None, [card.get('effectiveValue').get('stringValue') if card.get('effectiveValue') else None for row in row_data for card in row]))
  print(card_list[:5])
  print(len(card_list))
#+END_SRC


#+RESULTS:
: ['Ajani, Caller of the Pride', 'Aetherling', 'Bile Blight', 'Abbot of Keral Keep', 'Acidic Slime']
: 506

#+BEGIN_SRC ipython :session :results output :exports both
  import re
  q_filter = re.compile('[?]')
  card_list = list(map(lambda x: q_filter.sub('', x), card_list))
  print(card_list[:5])
#+END_SRC

#+RESULTS:
: ['Ajani, Caller of the Pride', 'Aetherling', 'Bile Blight', 'Abbot of Keral Keep', 'Acidic Slime']


#+BEGIN_SRC ipython :session :results output :exports both
  cube_list = []

  def parse_color(colors, card_type):
      if 'Land' in card_type:
          return 'Land'
      elif colors == None:
          return 'Colorless'
      elif len(colors) == 1:
          return colors[0]
      elif len(colors) > 1:
          return 'Multicolored'
      else:
          return 'ERROR'

  for card_name in card_list:
      card_name = card_name.strip()
      if 'Aether' in card_name: #what idiot thought it would be funny to use weird UTF8 encoding on this
          card_name = card_name.replace('Aether', 'Æther')
      split_card = False
      if '/' in card_name: #what idiot thought it would be funny to split up split cards
          split_card = True
      if split_card:
          card_info = [cards[card_name.split('/')[0]], cards[card_name.split('/')[1]]]
      else:
          card_info = [cards[card_name]]
      for card_in in card_info:
          cube_list.append({'name': card_in['name'], 'cmc': card_in.get('cmc'), 'color': parse_color(card_in.get('colors'), card_in['type']), 'text': card_in.get('text')})
  cube_list = pd.DataFrame(cube_list)
  print(cube_list.head())
#+END_SRC

#+RESULTS:
#+begin_example
   cmc  color                        name  \
0  3.0  White  Ajani, Caller of the Pride   
1  6.0   Blue                   Ætherling   
2  2.0  Black                 Bile Blight   
3  2.0    Red         Abbot of Keral Keep   
4  5.0  Green                Acidic Slime   

                                                text  
0  +1: Put a +1/+1 counter on up to one target cr...  
1  {U}: Exile Ætherling. Return it to the battlef...  
2  Target creature and all other creatures with t...  
3  Prowess (Whenever you cast a noncreature spell...  
4  Deathtouch (Any amount of damage this deals to...  
#+end_example

#+BEGIN_SRC ipython :session :results output :exports both
  print(cube_list['color'].unique())
  print(cube_list[cube_list['color'] == 'Colorless'].head())
  cube_list['cmc'] = cube_list['cmc'].fillna(0)
  print(cube_list['cmc'].unique())
  import matplotlib.pyplot as plt
  import seaborn as sns
  import plotly.plotly as py
  import plotly.graph_objs as go
  traces = []
  for color in cube_list['color'].unique():
      if color != 'Land':
          plt.title('CMC for {}'.format(color))
          cmc_list = cube_list[cube_list['color'] == color]['cmc'] 
          plt.hist(cmc_list)
          ticks = np.arange(0, 10, 1)
          labels = range(ticks.size)
          plt.xticks(ticks, labels)
          plt.savefig('./graphs/{}_cmc.png'.format(color))
          plt.clf()
          traces.append(go.Histogram(
              x=cmc_list,
              opacity = .75,
              name=color,
              autobinx = False,
              xbins = dict(
                  start = -0.5,
                  end = 10.5,
                  size = 1
              )
          ))
  layout = go.Layout(
      barmode = 'stack'
  )
  fig = go.Figure(data = traces, layout = layout)
  py.plot(fig)
#+END_SRC

#+RESULTS:
#+begin_example
['White' 'Blue' 'Black' 'Red' 'Green' 'Multicolored' 'Land' 'Colorless']
    cmc      color              name  \
7   1.0  Colorless  Adventuring Gear   
15  2.0  Colorless  Arcbound Ravager   
23  1.0  Colorless   Basilisk Collar   
31  5.0  Colorless       Batterskull   
39  3.0  Colorless  Cloudstone Curio   

                                                 text  
7   Landfall — Whenever a land enters the battlefi...  
15  Sacrifice an artifact: Put a +1/+1 counter on ...  
23  Equipped creature has deathtouch and lifelink....  
31  Living weapon (When this Equipment enters the ...  
39  Whenever a nonartifact permanent enters the ba...  
[  3.   6.   2.   5.   0.   1.   7.   4.   9.   8.  10.]
#+end_example

